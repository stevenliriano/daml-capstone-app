module House where

import Daml.Script

-- TODO: Include comment to explain templates below for those who are not up to date on the code

template House
  with
    bookie : Party
    registeredBettors : [Party]
    -- gamblingAccount  : ContractId GamblingAccount -- TODO: uncomment this once GamblingAccount is implemented
  where
    signatory bookie
    observer registeredBettors
    key bookie : Party
    maintainer key

    choice AddBettor : ContractId GamblingAccountProposal
      with
        newBettor : Party
      controller bookie
      do
        let registeredBettorsUpdated = newBettor :: registeredBettors
        create House with
          bookie
          registeredBettors = registeredBettorsUpdated

        create GamblingAccountProposal with
          gamblingAccountAgreement = GamblingAccountAgreement
            with
              bookie = bookie
              bettor = newBettor

          -- gamblingAccount -- TODO: uncomment this once GamblingAccount is implemented

template GamblingAccount
  with
    bookie : Party
    bettor : Party
    amount : Decimal
  where
      signatory bookie, bettor
      key (bookie, bettor) : (Party, Party)
      maintainer key._2

      choice UpdateFunds : ContractId GamblingAccount
          with
              amountDelta : Decimal -- Currently allowing for negative decimals to be 
                                      -- inputted to subtract funds from account. Is this correct?
          controller bookie, bettor
          do
              create GamblingAccount 
                  with
                      bookie = bookie
                      bettor = bettor
                      amount = amount + amountDelta


template GamblingAccountProposal
  with
    gamblingAccountAgreement : GamblingAccountAgreement
  where
    signatory gamblingAccountAgreement.bookie
    observer gamblingAccountAgreement.bettor

    choice AcceptGamblingAccountProposal : ContractId GamblingAccountAgreement
      controller gamblingAccountAgreement.bettor
      do  
        create gamblingAccountAgreement
          with
            bookie = gamblingAccountAgreement.bookie
            bettor = gamblingAccountAgreement.bettor


template GamblingAccountAgreement
  with
    bookie : Party
    bettor : Party
  where
    signatory bookie, bettor
    
    choice CreateGamblingAccount : ContractId GamblingAccount
      with
        amount : Decimal
      controller bookie
      do
        create GamblingAccount
          with
            bookie = bookie
            bettor = bettor
            amount = amount


setup : Script ()
setup = script do
-- user_setup_begin
  alice <- allocatePartyWithHint "Alice" (PartyIdHint "Alice")
  bob   <- allocatePartyWithHint "Bob" (PartyIdHint "Bob")
  charlie   <- allocatePartyWithHint "Charlie" (PartyIdHint "Charlie")
  gambleking <- allocatePartyWithHint "GambleKing" (PartyIdHint "GambleKing")
  aliceId <- validateUserId "alice"
  bobId <- validateUserId "bob"
  charlieId <- validateUserId "charlie"
  gamblekingId <- validateUserId "gambleking"
-- user_setup_end

  let bettors = [alice, bob]

  houseHandle <- submit gambleking do
    createCmd House with
      bookie = gambleking
      registeredBettors = bettors

--  Happy Path 

-- Charlie would create Gambling Account here

  gamblingAccountProposal1 <- submit gambleking do
    exerciseCmd houseHandle AddBettor with 
      newBettor = charlie

  gamblingAccountAgreement1 <- submit charlie do
    exerciseCmd gamblingAccountProposal1 AcceptGamblingAccountProposal
 
  submit gambleking do
    exerciseCmd gamblingAccountAgreement1 (CreateGamblingAccount 500.0)

  pure()
