module House where

import Daml.Script
import GamblingAccount

-- TODO: Include comment to explain templates below for those who are not up to date on the code

template House
  with
    bookie : Party
    gamblingAccount  : GamblingAccount
    registeredBettors : [Party]
  where
    signatory bookie
    observer registeredBettors
    key bookie : Party
    maintainer key
    -- CONSIDERATION: we made it so that the bookie 
    -- can only create one House contract so that 
    -- each House contract can be uniquely identified by the bookie as the key
    -- TODO: add ensure statement to ensure bookie does not already have a House contract

    choice AddBettor : ContractId GamblingAccountProposal
      with
        newBettor : Party
      controller bookie
      do
        let registeredBettorsUpdated = newBettor :: registeredBettors
        create House with
          bookie
          gamblingAccount
          registeredBettors = registeredBettorsUpdated

        create GamblingAccountProposal with
          gamblingAccount = GamblingAccount
            with
              assetType = gamblingAccount.assetType
              bookie = bookie
              owner = newBettor
          newBettor = newBettor

          -- gamblingAccount -- TODO: uncomment this once GamblingAccount is implemented



-- add a bank account template as well as an asset template to represent assets within that bank account
-- talk about relevance of amount in gambling account and why it is needed in workflow in final presentation
-- can use IOU to represent cash


setup : Script ()
setup = script do
-- user_setup_begin
  alice <- allocatePartyWithHint "Alice" (PartyIdHint "Alice")
  bob   <- allocatePartyWithHint "Bob" (PartyIdHint "Bob")
  charlie   <- allocatePartyWithHint "Charlie" (PartyIdHint "Charlie")
  gambleunion <- allocatePartyWithHint "GambleUnion" (PartyIdHint "GambleUnion")
  gambleking <- allocatePartyWithHint "GambleKing" (PartyIdHint "GambleKing")
  aliceId <- validateUserId "alice"
  bobId <- validateUserId "bob"
  charlieId <- validateUserId "charlie"
  gambleunionId <- validateUserId "gambleunion"
  gamblekingId <- validateUserId "gambleking"
-- user_setup_end

  let bettors = [alice, bob]


  -- cash1 <- submit federalreserve do
  --   createCmd Cash with
  --     issuer = federalreserve
  --     owner = federalreserve
  --     amount = 500.0

  -- houseHandle <- submit gambleking do
  --   createCmd House with
  --     bookie = gambleking
  --     gamblingAccount = 
  --     registeredBettors = bettors

  -- -- Happy Path 

  -- -- Charlie would create Gambling Account here

  -- gamblingAccountProposal1 <- submit gambleking do
  --   exerciseCmd houseHandle AddBettor with 
  --     newBettor = charlie

  -- gamblingAccountAgreement1 <- submit charlie do
  --   exerciseCmd gamblingAccountProposal1 AcceptGamblingAccountProposal
 
  -- submit gambleking do
  --   exerciseCmd gamblingAccountAgreement1 (CreateGamblingAccount 500.0)

  pure()
