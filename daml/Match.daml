module Match where

import Daml.Script
import DA.Foldable (forA_)
import DA.List
import DA.Optional
import DA.Assert
import Account
import Asset

makeTextOptional: Text -> Optional Text
makeTextOptional text = if (True) then Some text else None

makeTransferOptional: ContractId AssetTransfer -> Optional (ContractId AssetTransfer)
makeTransferOptional transfer = if (True) then Some transfer else None

template Match
  with
    admin       : Party
    gamblersUnion : GamblersUnion
    competitors : (Text, Text)
    time        : Time
    winner : Optional Text
  where
    signatory admin
    observer gamblersUnion.registeredBookies, gamblersUnion.assetType.issuer
    -- admin, competitors, time identifies a unique Match, and we will 
    -- enforce that the bookie can only create one BetSlip per Match
    key (admin, competitors, time) : (Party, (Text, Text), Time)
    maintainer key._1

    nonconsuming choice CreateBetSlip : ContractId BetSlip
      with
        odds : [(Text, Decimal, Decimal)]
        bookie : Party
      controller bookie
      do
        (houseContractId, housePayload) <- fetchByKey @House (bookie, gamblersUnion.assetType) 
        let bettors = housePayload.registeredBettors
        create BetSlip with
         admin = admin
         bookie = bookie 
         competitors = competitors
         odds = odds
         time = time        
         bettors=bettors
         gamblersUnion = gamblersUnion
         betCids = []          

    choice SettleMatch : ContractId Match
      with
        victor : Text
      controller admin
      do
        create this with
          winner = makeTextOptional victor

template BetSlip
  with
    admin         : Party
    bookie        : Party
    competitors   : (Text, Text)
    odds          : [(Text,Decimal,Decimal)]      -- Tuple like Thunder, 3, 1 odds. 
                                          -- First int in odds represents bettor's profit if they win, 
                                          -- second int represents how much they bet. For example, if the odds are 3:1,
                                          -- the bettor would bet $1 to win $3 profit, meaning they would win $4 total.
    time          : Time
    bettors       : [Party]
    gamblersUnion : GamblersUnion
    betCids : [ContractId Bet]                  
  where
    signatory bookie
    observer bettors, admin, gamblersUnion.assetType.issuer
    key (bookie, admin, competitors, time) : (Party, Party, (Text, Text), Time)
    maintainer key._1
    
    nonconsuming choice Create_Bet_Proposal : ContractId BetProposal
      with
        bettor1Odds : [(Text,Decimal,Decimal)]
        bettor1 : Party 
        bettor2 : Party 
        bettor1Amount : Decimal
        bettor1Pick : Text
        bettor1AssetCids: [ContractId Asset]
      controller bettor1     
      do
        (bettor1GamblingAcctCid, bettor1GamblingAcct) <- fetchByKey @GamblingAccount (gamblersUnion.assetType, bookie, bettor1)
        
        if (bettor2 == bookie) then do 
          assertMsg "bettor1 cannot provide odds if placing a bet against bookie, they must accept bookie's odds" (null bettor1Odds)
        
          -- create transfer from bettor1 to bettor2
          bettor1TransferCid <- exercise bettor1GamblingAcctCid Create_Transfer with 
            assetCids = bettor1AssetCids 
            transfer = (bettor1Amount, bettor2)
            
          create BetProposal with
            betAgreement = BetAgreement with
              odds
              bettor1
              bettor2
              bookie
              bettor1Amount
              bettor1Pick
              bettor1AssetCids
              bettor2AssetCids = []
              bettor1TransferCid
              bettor2TransferCid = None
              gamblersUnion
              matchAdmin = admin
              competitors
              time
        else do 
          assertMsg "bettor1 must provide odds if placing a bet against another bettor" (not (null bettor1Odds))
          -- split bettor1 assets into one asset for transfer to bettor2 and another asset
          -- for transfer to bookie to pay house fee
          bettor1NewAssetCids <- exercise bettor1GamblingAcctCid Merge_Split with 
            assetCids = bettor1AssetCids 
            outputAmounts = [0.95 * bettor1Amount, 0.05 * bettor1Amount]

          -- create transfer from bettor1 to bettor2 with house fee deducted
          bettor1TransferCid <- exercise bettor1GamblingAcctCid Create_Transfer with
            assetCids = [last bettor1NewAssetCids]
            transfer = (0.95 * bettor1Amount, bettor2)

          -- create transfer from bettor1 to bookie to pay house fee
          bettor1HouseTransferCid <- exercise bettor1GamblingAcctCid Create_Transfer with 
            assetCids = [bettor1NewAssetCids!!1]
            transfer = (0.05 * bettor1Amount, bookie)
          
          create BetProposal with
            betAgreement = BetAgreement with
              odds = bettor1Odds
              bettor1
              bettor2
              bookie
              bettor1Amount
              bettor1Pick
              bettor1AssetCids
              bettor2AssetCids = []
              bettor1TransferCid
              bettor2TransferCid = None
              gamblersUnion
              matchAdmin = admin
              competitors
              time

    choice SettleBets: ()
      controller gamblersUnion.assetType.issuer
      do 
        forA_ betCids (\betCid -> do
            exercise betCid Settle_Bet
          )
        pure()

template Bet
  with
    odds : [(Text,Decimal,Decimal)]
    bettor1 : Party
    bettor2 : Party
    bookie : Party
    bettor1Amount : Decimal
    bettor1Pick : Text
    bettor1AssetCids : [ContractId Asset]
    bettor2AssetCids : [ContractId Asset]
    bettor1TransferCid : ContractId AssetTransfer
    bettor2TransferCid : Optional (ContractId AssetTransfer)
    gamblersUnion : GamblersUnion
    matchAdmin : Party
    competitors : (Text, Text)
    time : Time
  where
    signatory bettor1, bettor2, bookie
    observer gamblersUnion.assetType.issuer

    choice Settle_Bet : ()
      controller gamblersUnion.assetType.issuer
      do
        (matchCid, match) <- fetchByKey @Match (matchAdmin, competitors, time)
        assertMsg "Cannot settle a bet before match winner is declared" (isSome match.winner)

        if (match.winner == makeTextOptional bettor1Pick) then do 
          -- accept bettor2 transfer
          exercise (fromSome bettor2TransferCid) Accept_Transfer
          -- cancel bettor1 transfer
          exercise bettor1TransferCid Reject_Transfer
          pure()
        else do
          -- accept bettor1 transfer
          exercise bettor1TransferCid Accept_Transfer
          -- cancel bettor2 transfer
          exercise (fromSome bettor2TransferCid) Reject_Transfer
          pure()

template BetProposal
  with
    betAgreement : BetAgreement
  where
    signatory betAgreement.bettor1
    observer betAgreement.bookie, betAgreement.bettor2

    choice AcceptBetProposal : ContractId BetAgreement
      with
        bettor2AssetCids : [ContractId Asset]
      controller betAgreement.bettor2
      do 
        (bettor2GamblingAcctCid, bettor2GamblingAcct) <- fetchByKey @GamblingAccount (betAgreement.gamblersUnion.assetType, betAgreement.bookie, betAgreement.bettor2)
        let competitorIndex = fromSome (findIndex (\competitorOdds -> competitorOdds._1 == betAgreement.bettor1Pick) betAgreement.odds)
        let bettor2Amount = ((betAgreement.odds!!competitorIndex)._2 / (betAgreement.odds!!competitorIndex)._3) * betAgreement.bettor1Amount + betAgreement.bettor1Amount

        if (betAgreement.bettor2 == betAgreement.bookie) then do
          -- create transfer from bettor2 to bettor1
          bettor2TransferCid <- exercise bettor2GamblingAcctCid Create_Transfer with 
            assetCids = bettor2AssetCids 
            transfer = (bettor2Amount, betAgreement.bettor1)

          create betAgreement with
            bettor2AssetCids
            bettor2TransferCid = makeTransferOptional bettor2TransferCid
        else do
          -- split bettor2 assets into one asset for transfer to bettor1 and another asset
          -- for transfer to bookie to pay house fee
          bettor2NewAssetCids <- exercise bettor2GamblingAcctCid Merge_Split with 
            assetCids = bettor2AssetCids 
            outputAmounts = [0.95 * bettor2Amount, 0.05 * bettor2Amount]
          
          -- create transfer from bettor2 to bettor1
          bettor2TransferCid <- exercise bettor2GamblingAcctCid Create_Transfer with 
            assetCids = [last bettor2NewAssetCids]
            transfer = (0.95 * bettor2Amount, betAgreement.bettor1)

          -- create transfer from bettor2 to bookie to pay house fee
          bettor2HouseTransferCid <- exercise bettor2GamblingAcctCid Create_Transfer with 
            assetCids = [bettor2NewAssetCids!!1]
            transfer = (0.05 * bettor2Amount, betAgreement.bookie)

          create betAgreement with
            bettor2AssetCids
            bettor2TransferCid = makeTransferOptional bettor2TransferCid


template BetAgreement
  with
    odds : [(Text,Decimal,Decimal)]
    bettor1 : Party
    bettor2 : Party
    bookie : Party
    bettor1Amount : Decimal
    bettor1Pick : Text
    bettor1AssetCids : [ContractId Asset]
    bettor2AssetCids : [ContractId Asset]
    bettor1TransferCid : ContractId AssetTransfer
    bettor2TransferCid : Optional (ContractId AssetTransfer)
    gamblersUnion : GamblersUnion
    matchAdmin : Party
    competitors : (Text, Text)
    time : Time
  where
    signatory bettor1, bettor2
    observer bookie

    choice Create_Bet : ContractId Bet
      controller bookie
      do
        -- create bet
        newBetCid <- create Bet with
          odds
          bettor1
          bettor2
          bookie
          bettor1Amount
          bettor1Pick
          bettor1AssetCids
          bettor2AssetCids
          bettor1TransferCid
          bettor2TransferCid
          gamblersUnion
          matchAdmin
          competitors
          time

        -- archive and recreate BetSlip with new betCid added to BetSlip's list of betCids
        (betSlipCid, betSlip) <- fetchByKey @BetSlip (bookie, matchAdmin, competitors, time)
        let oldBetSlipCids = betSlip.betCids
        archive betSlipCid
        create betSlip with
          betCids = newBetCid :: oldBetSlipCids

        return newBetCid