module Test where

import Daml.Script
import DA.Foldable (forA_)
import DA.List
import DA.Optional
import Match
import Account
import Asset


setup : Script() 
setup = script do
-- user_setup_begin
  alice    <- allocatePartyWithHint "Alice" (PartyIdHint "Alice")
  bob      <- allocatePartyWithHint "Bob" (PartyIdHint "Bob")
  charlie  <- allocatePartyWithHint "Charlie" (PartyIdHint "Charlie")
  gambleunion <- allocatePartyWithHint "GambleUnion" (PartyIdHint "GambleUnion")
  matchqueen <- allocatePartyWithHint "MatchQueen" (PartyIdHint "MatchQueen")
  gambleking <- allocatePartyWithHint "GambleKing" (PartyIdHint "GambleKing")
  aliceId <- validateUserId "alice"
  bobId   <- validateUserId "bob"
  charlieId <- validateUserId "charlie"
  gambleunionId <- validateUserId "gambleunion"
  matchqueenId <- validateUserId "matchqueen"
  gamblekingId <- validateUserId "gambleking"
  
-- user_setup_end
  let bettors = [alice,bob]
      odds = [ ("Thunder",3,2), ("QuickSand",2,1)]

  currentTime <- getTime -- using getTime to get a valid UTC timestamp
                          -- but we should really set time of matches to be an arbitrary timestamp in the future
  
  let bettors = [alice, bob]

  let
    gamble_tkn = AssetType with
      issuer = gambleunion
      symbol = "GBL"

  -- create union
  gamblersUnion1Cid <- submit gambleunion do
    createCmd GamblersUnion with
      assetType = gamble_tkn
      registeredBookies = []

  -- create house
  houseProposal1 <- submit gambleunion do
    exerciseCmd gamblersUnion1Cid (Create_House_Proposal gambleking)

  houseAgreement1 <- submit gambleking do 
    exerciseCmd houseProposal1 HouseProposal_Accept

  house1Cid <- submit gambleunion do
    exerciseCmd houseAgreement1 Create_House

  gamblekingAcctTuple <- queryContractKey @GamblingAccount gambleking (gamble_tkn, gambleking, gambleking)
  let (gamblekingAcctCid, gamblekingAcct) = fromSome gamblekingAcctTuple

  -- create alice account
  aliceAcctProposalCid <- submit gambleking do
    exerciseCmd gamblekingAcctCid (Invite_New_Owner alice)

  aliceAcctAgreementCid <- submit alice do
    exerciseCmd aliceAcctProposalCid AcceptGamblingAccountProposal

  aliceAcctCid <- submit gambleunion do
    exerciseCmd aliceAcctAgreementCid Create_Gambling_Account

  -- create bob account
  bobAcctProposalCid <- submit gambleking do
    exerciseCmd gamblekingAcctCid (Invite_New_Owner bob)

  bobAcctAgreementCid <- submit bob do
    exerciseCmd bobAcctProposalCid AcceptGamblingAccountProposal

  bobAcctCid <- submit gambleunion do
    exerciseCmd bobAcctAgreementCid Create_Gambling_Account

  -- create assets
  asset1Cid <- submit gambleunion do
    createCmd Asset with
      assetType = gamble_tkn
      owner = gambleunion
      amount = 100.0

  asset2Cid <- submit gambleunion do
    createCmd Asset with
      assetType = gamble_tkn
      owner = gambleunion
      amount = 200.0

  asset3Cid <- submit gambleunion do
    createCmd Asset with
      assetType = gamble_tkn
      owner = gambleunion
      amount = 300.0

  -- get accounts
  gambleunionAcctTuple <- queryContractKey @GamblingAccount gambleunion (gamble_tkn, gambleking, gambleunion)
  let (gambleunionAcctCid, gambleunionAcct) = fromSome gambleunionAcctTuple

  -- test negative transfer
  submitMustFail gambleunion do
    exerciseCmd gambleunionAcctCid Merge_Split with
      assetCids = [asset1Cid, asset2Cid, asset3Cid] 
      outputAmounts = [-400.0, 150.0]

  -- break assets into different denominations
  newAssetCids <- submit gambleunion do
    exerciseCmd gambleunionAcctCid Merge_Split with
      assetCids = [asset1Cid, asset2Cid, asset3Cid] 
      outputAmounts = [400.0, 150.0]

  -- create asset transfers
  submit gambleunion do 
    exerciseCmd gambleunionAcctCid Create_Transfers with
      assetCids = newAssetCids
      transfers = [(170.0, alice), (130.0, bob), (200.0, gambleking)]
  
  -- get all asset transfers being received by a particular party
  aliceTransfers <- queryFilter @AssetTransfer alice (\tx -> tx.recipient==alice)
  let aliceTransferCid = (head aliceTransfers)._1

  bobTransfers <- queryFilter @AssetTransfer bob (\tx -> tx.recipient==bob)
  let bobTransferCid = (head bobTransfers)._1

  bookieTransfers <- queryFilter @AssetTransfer gambleking (\tx -> tx.recipient==gambleking)
  let bookieTransferCid = (head bookieTransfers)._1

  -- Cannot accept via Accept_transfer
    -- Asset issuer or owner cannot accept transfer by calling Accept_Transfer choice on Asset contract
  submitMustFail alice do
    exerciseCmd aliceTransferCid Accept_Transfer
  
  -- Ownership transfer via Deposit_Transfer_Into_Account
  forA_ aliceTransfers (\transferCid -> do
    submit alice do
      exerciseCmd aliceAcctCid Deposit_Transfer_Into_Account with 
        transferCid = transferCid._1
    )

  submit bob do
    exerciseCmd bobAcctCid Deposit_Transfer_Into_Account with 
      transferCid = bobTransferCid

  submit gambleking do
    exerciseCmd gamblekingAcctCid Deposit_Transfer_Into_Account with 
      transferCid = bookieTransferCid

  gamblersUnionTuple <- queryContractKey @GamblersUnion gambleunion gamble_tkn
  let gamblersUnion = (fromSome gamblersUnionTuple)._2

  -- create Match and BetSlip
  match1Cid <- submit matchqueen do
    createCmd Match with
      admin = matchqueen
      gamblersUnion  = gamblersUnion
      competitors = ("Vikings", "Eagles")
      time = currentTime
      winner = None

  betSlip1Cid <- submit gambleking do
    exerciseCmd match1Cid CreateBetSlip with
      odds = [("Vikings", 3.0, 1.0), ("Eagles", 1.0, 3.0)]
      bookie = gambleking

  -- get all active asset contracts for a particular party
  aliceAssetTuples <- queryFilter @Asset alice (\asset -> asset.owner==alice)
  let aliceAssetCids = (unzip aliceAssetTuples)._1

  bobAssetTuples <- queryFilter @Asset bob (\asset -> asset.owner==bob)
  let bobAssetCids = (unzip bobAssetTuples)._1

  bookieAssetTuples <- queryFilter @Asset gambleking (\asset -> asset.owner==gambleking)
  let bookieAssetCids = (unzip bookieAssetTuples)._1

  -- create bet against bookie
  betProposal1 <- submit alice do
    exerciseCmd betSlip1Cid Create_Bet_Proposal with
      bettor1Odds = []
      bettor1 = alice
      bettor2 = gambleking
      bettor1Amount = 10.0
      bettor1Pick = "Eagles"
      bettor1AssetCids = aliceAssetCids

  betAgreement1 <- submit gambleking do
    exerciseCmd betProposal1 AcceptBetProposal with
      bettor2AssetCids = bookieAssetCids

  bet1Cid <- submit gambleking do
    exerciseCmd betAgreement1 Create_Bet

  -- create bet against other bettor
  betSlip2Tuple <- queryContractKey @BetSlip gambleking (gambleking, matchqueen, ("Vikings", "Eagles"), currentTime)
  let betSlipCid2 = (fromSome betSlip2Tuple)._1

  betProposal2Cid <- submit bob do
    exerciseCmd betSlipCid2 Create_Bet_Proposal with
      bettor1Odds = [("Vikings", 2.0, 1.0), ("Eagles", 1.0, 2.0)]
      bettor1 = bob
      bettor2 = alice
      bettor1Amount = 10.0
      bettor1Pick = "Eagles"
      bettor1AssetCids = bobAssetCids

  aliceAssetTuples2 <- queryFilter @Asset alice (\asset -> asset.owner==alice)
  let aliceAssetCids2 = (unzip aliceAssetTuples2)._1

  betAgreement2Cid <- submit alice do
    exerciseCmd betProposal2Cid AcceptBetProposal with
      bettor2AssetCids = aliceAssetCids2

  bet2Cid <- submit gambleking do
    exerciseCmd betAgreement2Cid Create_Bet

  -- settle match
  submit matchqueen do
    exerciseCmd match1Cid (SettleMatch "Vikings")

  -- settle bets
  
  -- submit gambleunion do
  --   exerciseCmd bet1Cid Settle_Bet

  -- submit gambleunion do
  --   exerciseCmd bet2Cid Settle_Bet

  newBetSlipTuple <- queryContractKey @BetSlip gambleunion (gambleking, matchqueen, ("Vikings", "Eagles"), currentTime)
  let newBetSlipCid = (fromSome newBetSlipTuple)._1

  submit gambleunion do
    exerciseCmd newBetSlipCid SettleBets

  -- Deposit House Fees into bookie gambling acct

  bookieHouseTuple <- queryContractKey @House gambleking (gambleking, gamble_tkn)
  let bookieHouseCid = (fromSome bookieHouseTuple)._1

  bookieTransferTuples <- queryFilter @AssetTransfer gambleking (\transfer -> transfer.recipient==gambleking)
  let bookieTransferCids = (unzip bookieTransferTuples)._1

  submit gambleking do
    exerciseCmd bookieHouseCid Deposit_House_Fees with
      transferCids = bookieTransferCids

  -- Assert balance
  -- optionalAccount <- queryContractId gambleunion gambleunionAcctCid
  -- let account = fromSome optionalAccount
  -- balance <- accountBalance account
  -- debug balance
  -- balance === 240.0

  pure()