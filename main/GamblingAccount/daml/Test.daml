module Test where
import GamblingAccount
import Cash

import DA.Set as Set
import Daml.Script

trade_test: Script ()

data TestParties = TestParties with
  alice: Party
  bob: Party
  chris: Party
  dianne: Party
  issuer: Party
  party1: Party
  party2: Party
  house: Party

setupParties: Script TestParties
setupParties = do
  let parties = ["alice"]
  alice <- allocateParty "Alice"
  bob <- allocateParty "Bob"
  chris <- allocateParty "Chris"
  dianne <- allocateParty "Dianne"
  issuer <- allocateParty "issuer"
  party1 <- allocateParty "party1"
  party2 <- allocateParty "party2"
  house <- allocateParty "House"
  return $ TestParties with ..

trade_test = do
  testParties@TestParties{..} <- setupParties

-- Account creation and asset issuance start  
  -- Account creation start
  house_gambling_account_cid <- submit house do
    createCmd GamblingAccount with 
      currency = GamblingAccount.USD
      owner = house
      issuer = house

  -- Account creation end

  -- Cash Asset issuance start
  house_cash_asset_cid_1 <- submit house do
    createCmd Cash with
      currency = Cash.USD
      issuer = house
      owner = house
      amount = 100.0
      observers = Set.empty

  -- Asset issuance end
-- End of Account creation and asset issuance

-- Start of invitations to accounts
  house_gambing_account_proposal_cid <- submit house do
    exerciseCmd house_gambling_account_cid Invite_New_Asset_Holder with
      recipient = alice
  
  alice_gambling_account_cid <- submit alice do
    exerciseCmd house_gambing_account_proposal_cid CashAssetHoldingAccountProposal_Accept

-- End of invitations

 -- Balance before swap

--  debug (show party1_common_account_cid)

  pure()